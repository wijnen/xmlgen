#!/usr/bin/env python

# xmlgen: Convert python-style files into xml documents
# Copyright 2011 Bas Wijnen <wijnen@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''This program reads a file which is formatted with meaningful indentation (similar to python code). It turns it into an xml file.
Example input:

>html en
head
	>htmlct
	title
		'Example page
body
	p
		'some text
		'some more text
		!--included comment
		# not included comment

This is transformed into:

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<title>Example page</title>
	</head>
	<body>
		<p>some text
some more text<!--included comment--></p>
	</body>
</html>


In other words, tags are written with brackets; end tags are added.
Lines starting with ' are used as text content, starting with ! are treated specially
tags with text as direct child nodes or parents with direct child nodes preserve whitespace (meaning they do not add newlines or copy indentation).
Two text nodes in a row get a newline between them.
'''

import sys

def close ():
	'''Close the top of stack and add it to its parent'''
	e = stack.pop ()
	stack[-1]['children'].append (e)

def parse_attrs (attrs):
	'''add quotes and escaping entities to an element'''
	x = attrs.split (None, 1)
	v = x[0]
	if len (x) > 1:
		x = x[1]
		while x != '':
			x = x.lstrip ()
			pos = x.index ('=')
			if x[pos + 1] == '"' or x[pos + 1] == "'":
				p = x.index (x[pos + 1], pos + 2)
				v += ' ' + x[:p + 1]
				x = x[p + 1:]
			else:
				a = x[:pos]
				x = x[pos + 1:].split (None, 1)
				v += ' ' + a + '="' + x[0].replace ('&', '&amp;').replace ('<', '&lt;').replace ('>', '&gt;').replace ('"', '&quot;') + '"'
				if len (x) > 1:
					x = x[1]
				else:
					x = ''
	return v

stack = [{'indent': -2, 'istr': '', 'value': 'BUG', 'online': None, 'tag': True, 'children': []}]
while True:
	line = sys.stdin.readline ()
	if line == '':
		break
	l = line.lstrip ()
	indent = len (line) - len (l)
	if l == '' or l[0] == '#':
		continue
	if l[-1] == '\n':
		l = l[:-1]
	if l[-1] == '\r':
		l = l[:-1]
	while indent < stack[-1]['indent']:
		close ()
	if l[0] == "'":
		l = l[1:]
		is_tag = False
	else:
		is_tag = True
		if l[0] == '>':
			# Create header for this filetype.
			# With a known header, allow children of the root element without indentation.
			if indent == 0:
				fakeindent = -1
			else:
				fakeindent = indent
			x = l[1:].split ()
			if x[0] == 'html':
				stack[-1]['children'].append ({'indent': fakeindent, 'istr': line[:indent], 'online': None, 'value': '!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"', 'tag': True, 'children': []})
				stack.append ({'indent': fakeindent, 'istr': line[:indent], 'online': None, 'value': 'html xmlns="http://www.w3.org/1999/xhtml" lang="' + x[1] + '" xml:lang="' + x[1] + '"', 'tag': True, 'children': []})
				continue
			if x[0] == 'svg':
				stack[-1]['children'].append ({'indent': fakeindent, 'istr': line[:indent], 'online': None, 'value': '!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"', 'tag': True, 'children': []})
				stack.append ({'indent': fakeindent, 'istr': line[:indent], 'online': None, 'value': parse_attrs ('svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink"' + ' '.join (x[1:])), 'tag': True, 'children': []})
				continue
			if x[0] == 'htmlct':
				l = line[:indent] + 'meta http-equiv="Content-Type" content="text/html; charset=utf-8"'
			else:
				raise AssertionError ('unknown header %s requested' % x[0])
		if l[0] == ':':
			online = l[1:]
			l = None
		if l[0] != '!' and l[0] != '?':
			x = l.split (None, 1)
			if x[0][-1] == ':':
				l = x[0][:-1]
				online = x[1]
			else:
				l = parse_attrs (l)
				online = None
	if indent > stack[-1]['indent']:
		assert stack[-1]['tag'] != False, 'cannot nest in text'
		assert stack[-1]['online'] == None, 'on-line content cannot be expanded or nested'
	else:
		close ()
	stack.append ({'indent': indent, 'istr': line[:indent], 'value': l, 'online': online, 'tag': is_tag, 'children': []})
# Clean up: close all open tags.
while stack[-1]['indent'] >= -1:
	close ()

# Now write the tree.
assert len (stack) == 1, 'Bug in generator: stack not empty at end of input'
assert len (stack[0]['children']) > 0, 'No input elements'

def write (tag, with_text):
	r = ''
	if tag['indent'] >= -1:
		if tag['value'] != None:
			r += '<' + tag['value']
		if len (tag['children']) == 0:
			if tag['online'] != None:
				if tag['value'] != None:
					r += '>' + tag['online'] + '</' + tag['value']
				else:
					r += tag['online']
			elif tag['value'][0] == '?':
				r += '?'
			elif tag['value'][0] != '!':
				r += '/'
			elif tag['value'][:3] == '!--':
				r += '--'
			if tag['value'] != None:
				r += '>'
			return r
		r += '>'
	else:
		assert tag['tag'], 'Root elements must be tags'
	assert tag['value'][0] != '!', 'special tags may not have children'
	assert tag['value'][0] != '?', 'special tags may not have children'
	have_text = with_text
	for c in tag['children']:
		if not c['tag']:
			have_text = True
			break
	was_text = False
	for c in tag['children']:
		if c['tag']:
			if not have_text:
				if tag['indent'] >= -1 or c is not tag['children'][0]:
					r += '\n'
				r += c['istr']
			r += write (c, have_text)
			was_text = False
		else:
			if was_text:
				r += '\n'
			r += c['value']
			was_text = True
	if tag['indent'] >= -1:
		if not have_text:
			r += '\n' + tag['istr']
		r += '</' + tag['value'].split ()[0] + '>'
	return r

sys.stdout.write (write (stack[0], False) + '\n')
